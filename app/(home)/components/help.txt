"use client";
import React, { useRef, useState, useEffect } from "react";
import { SiPython, SiPytorch, SiPandas, SiTensorflow, SiScikitlearn, SiOpencv, SiDialogflow, SiGoogleassistant } from "react-icons/si";
import { FaJava, FaChevronLeft, FaChevronRight } from "react-icons/fa";
import Title from "./Title";
import { cn } from "@/lib/utils";
import { DirectionAwareHover } from "./ui/direction-aware-hover";

export default function Project() {
    const projects = [
        {
            title: "Zipursky Lab, UCLA CaSB Thesis",
            subtitle: "Gene Expression and Subtype Analysis of Astrocytes in the Mouse Brain",
            tech: [SiPython, SiPandas, SiScikitlearn],
            link: "/James_Fu_Poster_Final.pdf",
            cover: "/project-2.png",
            background: "bg-zinc-900",
            description: "Developed a pipeline using unsupervised machine learning to identify six astrocyte subtypes through spatial clustering of spatial transcriptomic data from the Allen Mouse Brain Atlas, discovered 104 astrocyte-specific genes through differential expression analysis with Bonferroni correction across 10+ million cells.",
        },
        {
            title: "NLI Cartography Study, UT Austin CS388",
            subtitle: "Enhancing Robustness in Natural Language Inference Models",
            tech: [SiPython, SiPytorch, SiTensorflow],
            link: "/NLI Robustness Study - James Fu.pdf",
            cover: "/SNLI_dark.png",
            background: "bg-zinc-900",
            description: "Explored a method previously studied by Swayamdipta et al. (2020) to improve NLI robustness. Fine-tuned ELECTRA-small using dataset cartography and contrast sets with distractors, reweighting hard-to-learn examples during training to reduce artifacts. Achieved an 8% accuracy increase on new contrast sets after adding distractors and reweighting training examples to improve model robustness.",
        },
        {
            title: "Faircare, LA Hacks 2024",
            subtitle: "Developing Faircare for Transparent Pricing",
            tech: [SiPython, SiPytorch, SiTensorflow],
            link: "",
            cover: "/project-3.png",
            background: "bg-zinc-900",
            description: "A healthcare cost modeling website that implements ML-algorithms and deep learning to generate synthetic data and determine fair medical costs with high accuracy and providing users regardless of insurance coverage with transparent pricing estimates.",
        },
        {
            title: "Dotmentia, Los Altos Hacks IV",
            subtitle: "Dementia Care via Voice Assistance and Facial Recognition",
            tech: [SiOpencv, SiDialogflow, SiGoogleassistant, FaJava],
            link: "https://devpost.com/software/dotmentia",
            cover: "/googlehome.jpg",
            background: "bg-zinc-900",
            description: "Won 1st place by building Dotmentia, an assistive AI system that leverages facial recognition (OpenCV) and Google Assistant integration (DialogFlow) to help dementia patients recognize family members and those around them in real-time, enhancing their daily interactions and independence."
        },
    ];

    const scrollContainerRef = useRef(null);
    const [isHovered, setIsHovered] = useState(false);
    const [currentIndex, setCurrentIndex] = useState(0);
    const projectWidth = 500; // Adjust width if needed

    const scrollToProject = (index) => {
        if (scrollContainerRef.current) {
            scrollContainerRef.current.scrollTo({
                left: index * projectWidth,
                behavior: "smooth",
            });
        }
    };

    const handleNext = () => {
        if (currentIndex === projects.length - 1) {
            scrollToProject(0);
            setCurrentIndex(0);
        } else {
            scrollToProject(currentIndex + 1);
            setCurrentIndex(currentIndex + 1);
        }
    };

    const handlePrev = () => {
        if (currentIndex === 0) {
            scrollToProject(projects.length - 1);
            setCurrentIndex(projects.length - 1);
        } else {
            scrollToProject(currentIndex - 1);
            setCurrentIndex(currentIndex - 1);
        }
    };

    useEffect(() => {
        if (isHovered) return;

        const interval = setInterval(() => {
            handleNext();
        }, 5000);

        return () => clearInterval(interval);
    }, [currentIndex, isHovered]);

    return (
        <div id="projects" className="relative p-5 sm:p-0 py-10 mt-20 px-4">
            <Title text="Projects" className="flex flex-col items-center justify-center" />

            {/* Left Arrow (Only Visible on Desktop) */}
            <button 
                onClick={handlePrev} 
                className="hidden sm:block absolute left-[-70px] top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 p-3 rounded-full shadow-lg hover:bg-gray-700 transition"
            >
                <FaChevronLeft className="text-white w-6 h-6" />
            </button>

            {/* Responsive Layout: Column on Mobile, Horizontal Scroll on Desktop */}
            <div 
                ref={scrollContainerRef} 
                className="w-full flex flex-col sm:flex-row sm:overflow-x-auto sm:space-x-5 scrollbar-hide scroll-smooth mt-10 p-5 justify-center"
                onMouseEnter={() => setIsHovered(true)} 
                onMouseLeave={() => setIsHovered(false)}
            >
                {projects.map((project, index) => (
                    <div key={index} className="flex flex-col w-full sm:min-w-[500px] snap-center">
                        <div className={cn("p-0 rounded-md shadow-lg flex flex-col h-full", project.background)}>
                            {/* Browser window style with buttons */}
                            <div className="flex items-center space-x-2 p-2 bg-gray-800 rounded-t-md">
                                <div className="flex space-x-2 ml-2">
                                    <span className="w-3 h-3 bg-red-500 rounded-full"></span>
                                    <span className="w-3 h-3 bg-yellow-500 rounded-full"></span>
                                    <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                                </div>
                            </div>

                            {/* Project content */}
                            <div className="p-4 flex-grow">
                                {/* Title */}
                                <h1 className="text-lg font-semibold text-white text-center py-4">
                                    {project.title}
                                </h1>

                                {/* Image Section */}
                                <DirectionAwareHover 
                                    imageUrl={project.cover} 
                                    className="w-full space-y-5 h-[22rem] sm:h-96 cursor-pointer"
                                >
                                    <div className="space-y-5 m-[10px]">
                                        {/* Subtitle moved above the description */}
                                        <h2 className="text-md font-semibold text-white-300 text-left">
                                            {project.subtitle}
                                        </h2>

                                        <p className="text-sm text-gray-300">{project.description}</p>
                                        <div className="flex items-center gap-5">
                                            {project.tech.map((Icon, idx) => (
                                                <Icon key={idx} className="w-5 h-5 text-gray-300" />
                                            ))}
                                        </div>
                                        <div className="mt-10 hidden sm:block">
                                            <a 
                                                href={project.link} 
                                                className="inline-flex text-sm items-center px-5 py-3 font-medium rounded-md 
                                                    bg-gradient-to-r from-[#1E1E2E] to-[#313244] 
                                                    hover:from-[#45475A] hover:to-[#585B70] 
                                                    text-white shadow-lg transition-all duration-300"
                                            >
                                                Read More
                                            </a>
                                        </div>
                                    </div>
                                </DirectionAwareHover>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Right Arrow (Only Visible on Desktop) */}
            <button 
                onClick={handleNext} 
                className="hidden sm:block absolute right-[-70px] top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 p-3 rounded-full shadow-lg hover:bg-gray-700 transition"
            >
                <FaChevronRight className="text-white w-6 h-6" />
            </button>
        </div>
    );
}
